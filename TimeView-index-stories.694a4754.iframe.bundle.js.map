{"version":3,"file":"TimeView-index-stories.694a4754.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;AA4GA","sources":["webpack://@toshusai/app-ui/./src/TimeView/index.tsx"],"sourcesContent":["import { FC } from \"react\";\n\nimport { useWidth } from \"../hooks/useWidth\";\nimport styled from \"styled-components\";\nimport { TimeText } from \"./TimeText\";\n\nfunction defaultRenderText(time: number) {\n  let viewTime = time.toFixed(2);\n  if (viewTime.endsWith(\".00\")) {\n    viewTime = viewTime.slice(0, -3);\n  } else if (viewTime.endsWith(\"0\")) {\n    viewTime = viewTime.slice(0, -1);\n  }\n  if (viewTime === \"-0\") {\n    viewTime = \"0\";\n  }\n  return viewTime;\n}\n\ntype TimeViewProps = {\n  offsetSec: number;\n  pxPerSec: number;\n  height?: number;\n  steps?: number[];\n  renderText?: (time: number) => string;\n} & Omit<JSX.IntrinsicElements[\"div\"], \"ref\">;\n\nexport const secStep = [0.01, 0.05, 0.1, 0.2, 0.5, 1, 5, 10, 30, 60];\n\nconst minInterval = 32;\n\nexport function getStepPixel(\n  pxPerSec: number,\n  minInterval: number,\n  step: number[],\n  width: number,\n  offsetSec = 0\n) {\n  const stepI = step.findIndex((s) => s * pxPerSec > minInterval);\n  const stepPx = step[stepI] * pxPerSec;\n  const viewNumber = Math.ceil(width / stepPx);\n  const offset = (offsetSec * pxPerSec) % stepPx;\n  if (isNaN(viewNumber)) return [];\n  return [...Array(viewNumber).keys()].map((i) => {\n    return i * stepPx - offset;\n  });\n}\n\nexport const TimeView: FC<TimeViewProps> = (props) => {\n  const [width, ref] = useWidth();\n\n  const { offsetSec, pxPerSec, renderText, steps: propsSteps, ...rest } = props;\n  const steps = getStepPixel(\n    props.pxPerSec,\n    minInterval,\n    propsSteps ?? secStep,\n    width,\n    props.offsetSec\n  );\n  const pSteps = getStepPixel(\n    props.pxPerSec,\n    minInterval / 4,\n    propsSteps ?? secStep,\n    width,\n    props.offsetSec\n  );\n\n  return (\n    <TimeViewRootDiv\n      ref={ref}\n      onMouseDown={props.onMouseDown}\n      onTouchStart={props.onTouchStart}\n      style={{\n        height: props.height,\n      }}\n      {...rest}\n    >\n      {pSteps.map((left) => {\n        return <TimePointDiv $left={left} key={left} />;\n      })}\n      {steps.map((left) => {\n        const time = left / props.pxPerSec + props.offsetSec;\n        return (\n          <TimeText\n            time={renderText ? renderText(time) : defaultRenderText(time)}\n            height={props.height ?? 20}\n            key={left}\n            left={left}\n          />\n        );\n      })}\n    </TimeViewRootDiv>\n  );\n};\n\nconst TimeViewRootDiv = styled.div`\n  position: relative;\n  height: 20px;\n  width: 100%;\n  overflow: hidden;\n  font-size: 12px;\n  box-sizing: border-box;\n  border: 1px solid white;\n  user-select: none;\n  touch-action: none;\n  color: white;\n`;\n\nconst TimePointDiv = styled.div.attrs<{\n  $left: number;\n}>((props) => ({\n  style: {\n    left: props.$left,\n  },\n}))<{ $left: number }>`\n  position: absolute;\n  touch-action: none;\n  pointer-events: none;\n  border-left: 1px solid gray;\n  height: 4px;\n  bottom: 0px;\n`;\n"],"names":[],"sourceRoot":""}