{"version":3,"file":"panel-HPanel-stories.d05de9a8.iframe.bundle.js","mappings":";;;AAQA;;;;;;AAMA;;;;;;;;;;ACCA;;;;;AAOA;;;;;;ACPA;;;;;AAOA","sources":["webpack://@toshusai/app-ui/./src/panel/__stories__/ExampleDiv.tsx","webpack://@toshusai/app-ui/./src/panel/HPanel.tsx","webpack://@toshusai/app-ui/./src/panel/VPanel.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { COLOR_BACKGROUND_NAME } from \"../../GlobalStyle\";\n\nexport const Root = styled.div`\n  width: 100%;\n  height: 256px;\n`;\n\nexport const ExampleDiv = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(${COLOR_BACKGROUND_NAME});\n`;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDragHandler } from \"../utils/getDragHandler\";\n\nimport { DividerBox } from \"./DividerBox\";\n\nconst HPanelDivider = styled.div`\n  min-width: 4px;\n  min-height: 100%;\n  background-color: var(--color-panel-divider);\n  cursor: col-resize;\n  user-select: none;\n`;\n\nconst HBoxRoot = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const HPanel = ({\n  left,\n  right,\n  defaultRate,\n}: {\n  left: React.ReactNode;\n  right: React.ReactNode;\n  defaultRate?: number;\n}) => {\n  const [rate, setRate] = React.useState(defaultRate ?? 0.5);\n  const leftWidth = `calc(${rate * 100}% - 2px)`;\n  const rightWidth = `calc(${(1 - rate) * 100}% - 2px)`;\n  const handleMouseDown = getDragHandler((ctx) => {\n    const { diffX } = ctx;\n    const el = ctx.startEvent.target as HTMLElement;\n    const ctxWidth = el.parentElement?.clientWidth ?? 0;\n    const newRate = Math.max(0, Math.min(1, rate + diffX / ctxWidth));\n    setRate(newRate);\n  });\n  return (\n    <HBoxRoot>\n      <DividerBox\n        style={{\n          width: leftWidth,\n        }}\n      >\n        {left}\n      </DividerBox>\n      <HPanelDivider onMouseDown={handleMouseDown} />\n      <DividerBox\n        style={{\n          width: rightWidth,\n        }}\n      >\n        {right}\n      </DividerBox>\n    </HBoxRoot>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDragHandler } from \"../utils/getDragHandler\";\n\nimport { DividerBox } from \"./DividerBox\";\n\nconst VPanelDivider = styled.div`\n  width: 100%;\n  min-height: 4px;\n  background-color: var(--color-panel-divider);\n  cursor: row-resize;\n  user-select: none;\n`;\n\nconst VPanelBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const VPanel = ({\n  top,\n  bottom,\n  defaultRate = 0.5,\n}: {\n  top: React.ReactNode;\n  bottom: React.ReactNode;\n  defaultRate?: number;\n}) => {\n  const [rate, setRate] = React.useState(defaultRate ?? 0.5);\n  const topHeight = `calc(${rate * 100}% - 2px)`;\n  const bottomHeight = `calc(${(1 - rate) * 100}% - 2px)`;\n  const handleMouseDown = getDragHandler((ctx) => {\n    const { diffY } = ctx;\n    const el = ctx.startEvent.target as HTMLElement;\n    const ctxWidth = el.parentElement?.clientHeight ?? 0;\n    const newRate = Math.max(0, Math.min(1, rate + diffY / ctxWidth));\n    setRate(newRate);\n  });\n  return (\n    <VPanelBox>\n      <DividerBox\n        style={{\n          height: topHeight,\n        }}\n      >\n        {top}\n      </DividerBox>\n      <VPanelDivider onMouseDown={handleMouseDown} />\n      <DividerBox\n        style={{\n          height: bottomHeight,\n        }}\n      >\n        {bottom}\n      </DividerBox>\n    </VPanelBox>\n  );\n};\n"],"names":[],"sourceRoot":""}