{"version":3,"file":"ScaleScrollBar-index-stories.332ecd07.iframe.bundle.js","mappings":";;;;;;;;AAkGA","sources":["webpack://@toshusai/app-ui/./src/ScaleScrollBar/index.tsx"],"sourcesContent":["import { FC, memo, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDragHander } from \"../utils/getDragHander\";\n\nexport const ScaleScrollBar: FC<{\n  start: number;\n  end: number;\n  onScaleChange?: (start: number, end: number) => void;\n  minimumRange?: number;\n}> = (props) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const handleMouseDownLeftHandle = getDragHander(({ diffX }) => {\n    let newStart = Math.max(props.start + diffX / ref.current!.clientWidth, 0);\n    const mimumWidthRate = minimumWidthPx / (ref.current?.clientWidth ?? 0);\n    if (props.end - newStart < mimumWidthRate) {\n      newStart = props.end - mimumWidthRate;\n    }\n    props.onScaleChange?.(newStart, props.end);\n  });\n\n  const handleMouseDownRightHandle = getDragHander(({ diffX }) => {\n    let newEnd = Math.min(props.end + diffX / ref.current!.clientWidth, 1);\n    const mimumWidthRate = minimumWidthPx / (ref.current?.clientWidth ?? 0);\n    if (newEnd - props.start < mimumWidthRate) {\n      newEnd = props.start + mimumWidthRate;\n    }\n    props.onScaleChange?.(props.start, newEnd);\n  });\n\n  const handleMouseDownStrip = getDragHander(({ diffX }) => {\n    const newStart = props.start + diffX / ref.current!.clientWidth;\n    const newEnd = props.end + diffX / ref.current!.clientWidth;\n    if (newStart < 0) {\n      props.onScaleChange?.(0, newEnd - newStart);\n      return;\n    } else if (newEnd > 1) {\n      props.onScaleChange?.(newStart - (newEnd - 1), 1);\n      return;\n    }\n    props.onScaleChange?.(newStart, newEnd);\n  });\n\n  const minimumWidthPx = 17;\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: `100%`,\n        minHeight: \"10px\",\n        backgroundColor: \"var(--color-input-background)\",\n        userSelect: \"none\",\n        border: \"1px solid var(--color-input-background)\",\n        boxSizing: \"border-box\",\n        position: \"relative\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"20px\",\n        }}\n      ></div>\n      <div\n        style={{\n          position: \"absolute\",\n          left: `calc(${props.start * 100}%)`,\n          width: `calc(${(props.end - props.start) * 100}%)`,\n          minWidth: `${minimumWidthPx}px`,\n          height: \"8px\",\n          backgroundColor: \"var(--color-border)\",\n        }}\n        onMouseDown={handleMouseDownStrip}\n      >\n        <ScaleScrollBarHandle\n          onMouseDown={handleMouseDownLeftHandle}\n          style={{ left: \"0px\" }}\n        />\n        <ScaleScrollBarHandle\n          onMouseDown={handleMouseDownRightHandle}\n          style={{ right: \"0px\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst ScaleScrollBarHandle = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: #3a3a3a;\n  cursor: pointer;\n`;\n\nexport const MemoScaleScrollBar = memo(ScaleScrollBar, (prev, next) => {\n  return (\n    prev.start === next.start &&\n    prev.end === next.end &&\n    prev.onScaleChange === next.onScaleChange\n  );\n});\n"],"names":[],"sourceRoot":""}