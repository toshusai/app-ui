{"version":3,"file":"Modal-index-stories.5bd8776e.iframe.bundle.js","mappings":";;;;;;;AAWA;;;;AAIA;;AAIA;;AAEA;;;;AAIA;;;;;;;;;AChBA;;;AAKA;;;;AAMA;;;;;;ACgHA;;AAEA;;;;;;;;;;;;;ACrHA;AACA;;;;;;AAMA;;;AAGA;AACA;;;AAKA;AACA;;;;;;;;ACpBA;AACA;;;;;;;;;;AAUA;;;;;;;;;;;ACfA;;;AAGA;;AAEA;;;AAGA;AACA;;;;;;;ACMA;;;AAIA;AAGA;;;;;;;;ACpBA;;;;;;;ACEA;AACA;;;AAGA;;;;;;;;;;ACgFA;;;;;;;AClFA;AACA;;;;;;;;;;;AAWA;;;AAGA;AACA;;;;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;ACgFA;;;;;;;;ACxGA;;;;;;;;;AASA;;;;;;ACNA;;;;;;AAQA;;;AASA;;ACFA;AACA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;;;;;AAOA;;;;;;ACPA;;;;;AAOA","sources":["webpack://@toshusai/app-ui/./src/IconButton/IconButton.tsx","webpack://@toshusai/app-ui/./src/layout/index.tsx","webpack://@toshusai/app-ui/./src/Modal/index.tsx","webpack://@toshusai/app-ui/./src/Button/Button.tsx","webpack://@toshusai/app-ui/./src/Input/Input.tsx","webpack://@toshusai/app-ui/./src/ListItem/ListItem.tsx","webpack://@toshusai/app-ui/./src/Menu/MenuItemBase.tsx","webpack://@toshusai/app-ui/./src/Menu/MenuItem.tsx","webpack://@toshusai/app-ui/./src/Popover/Popover.tsx","webpack://@toshusai/app-ui/./src/ScaleScrollBar/index.tsx","webpack://@toshusai/app-ui/./src/Select/Select.tsx","webpack://@toshusai/app-ui/./src/Textarea/Textarea.tsx","webpack://@toshusai/app-ui/./src/TimeView/index.tsx","webpack://@toshusai/app-ui/./src/ToolBarMenu/ToolBarButton.tsx","webpack://@toshusai/app-ui/./src/ToolTip/ToolTip.tsx","webpack://@toshusai/app-ui/./src/context_menu/ContextMenu.tsx","webpack://@toshusai/app-ui/./src/panel/HPanel.tsx","webpack://@toshusai/app-ui/./src/panel/VPanel.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { COLOR_BORDER_NAME, COLOR_BUTTON_BACKGROUND_NAME } from \"../GlobalStyle/GlobalStyle\";\n\n\nexport const IconButton = styled.button`\n  position: relative;\n  padding: 0;\n  width: 16px;\n  min-width: 16px;\n  min-height: 16px;\n  height: 16px;\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  cursor: pointer;\n  display: flex;\n  border-radius: 4px;\n  background-color: var(${COLOR_BUTTON_BACKGROUND_NAME});\n  user-select: none;\n`;\n\nexport const ButtonGroup = styled.div`\n  display: flex;\n  ${IconButton}:first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  ${IconButton}:last-child {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const RootDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  overflow: hidden;\n`;\n\nexport const HeaderDiv = styled.div`\n  display: flex;\n  height: 16px;\n`;\n\nexport const MainDiv = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n`;\n\nexport const BottomSpaceDiv = styled.div`\n  height: 8px;\n`;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { COLOR_BACKGROUND_NAME, IconButton, iconProps } from \"..\";\nimport { X } from \"tabler-icons-react\";\nimport styled from \"styled-components\";\n\nfunction useFocusTrap(\n  elementRef: React.RefObject<HTMLElement>,\n  isOpen: boolean,\n  onClose?: () => void\n) {\n  useEffect(() => {\n    const element = elementRef.current;\n\n    if (!element) return;\n\n    const focusableElements = element.querySelectorAll(\n      'a[href], button, textarea, input[type=\"text\"], input[type=\"radio\"], input[type=\"checkbox\"], select'\n    );\n\n    const firstFocusable = focusableElements[0];\n    const secondFocusable = focusableElements[1];\n    const lastFocusable = focusableElements[focusableElements.length - 1];\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Tab\") {\n        if (event.shiftKey) {\n          if (document.activeElement === firstFocusable) {\n            event.preventDefault();\n            if (lastFocusable instanceof HTMLElement) lastFocusable.focus();\n          }\n        } else {\n          if (document.activeElement === lastFocusable) {\n            event.preventDefault();\n            if (firstFocusable instanceof HTMLElement) firstFocusable.focus();\n          }\n        }\n      } else if (event.key === \"Escape\") {\n        if (isOpen) {\n          event.preventDefault();\n          onClose?.();\n        }\n      }\n    };\n    if (secondFocusable instanceof HTMLElement) secondFocusable.focus();\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [elementRef, isOpen, onClose]);\n}\n\nexport const Modal = ({\n  isOpen,\n  onClose,\n  children,\n  title,\n  canOutsideClickClose,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  children?: React.ReactNode;\n  canEscapeKeyClose?: boolean;\n  title?: string;\n  canOutsideClickClose?: boolean;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useFocusTrap(ref, isOpen, onClose);\n\n  const handleOutsideClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (canOutsideClickClose) {\n        onClose();\n      }\n    },\n    [canOutsideClickClose, onClose]\n  );\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return createPortal(\n    <div\n      ref={ref}\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        zIndex: 100,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n      }}\n      onClick={handleOutsideClick}\n    >\n      <Root>\n        <CloseButton>\n          <IconButton onClick={onClose}>\n            <X {...iconProps} />\n          </IconButton>\n        </CloseButton>\n\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div>{title}</div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            paddingTop: \"4px\",\n          }}\n        >\n          {children}\n        </div>\n      </Root>\n    </div>,\n    document.body\n  );\n};\n\nconst CloseButton = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst Root = styled.div`\n  box-shadow: 0px 0px 4px 0px rgba(0, 0, 0, 0.5);\n  background-color: var(${COLOR_BACKGROUND_NAME});\n  position: relative;\n  height: min-content;\n  width: min-content;\n  padding: 8px;\n`;\n","import styled, { css } from \"styled-components\";\nimport {\n  COLOR_BORDER_NAME,\n  COLOR_BUTTON_BACKGROUND_NAME,\n  COLOR_INPUT_BACKGROUND_DISABLED_NAME,\n  COLOR_INPUT_BACKGROUND_FOCUS_NAME,\n  COLOR_TEXT_DISABLED_NAME,\n} from \"../GlobalStyle/GlobalStyle\";\n\nexport const buttonCss = css`\n  cursor: pointer;\n  display: block;\n  color: var(--color-text);\n  box-sizing: border-box;\n  font-size: 12px;\n  line-height: 12px;\n  margin: 0;\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  background-color: var(${COLOR_BUTTON_BACKGROUND_NAME});\n  border-radius: 4px;\n  height: 16px;\n  padding-left: 8px;\n  max-width: 128px;\n  :active {\n    background-color: var(${COLOR_INPUT_BACKGROUND_FOCUS_NAME});\n  }\n  :disabled {\n    background-color: var(${COLOR_INPUT_BACKGROUND_DISABLED_NAME});\n    color: var(${COLOR_TEXT_DISABLED_NAME});\n  }\n  font-family: \"Ricty Diminished\";\n`;\n\nexport const Button = styled.button`\n  ${buttonCss}\n`;\n","import styled from \"styled-components\";\nimport {\n  COLOR_BORDER_NAME,\n  COLOR_INPUT_BACKGROUND_FOCUS_NAME,\n  COLOR_INPUT_BACKGROUND_NAME,\n} from \"../GlobalStyle/GlobalStyle\";\n\nexport const Input = styled.input`\n  display: block;\n  color: var(--color-text);\n  box-sizing: border-box;\n  font-size: 12px;\n  line-height: 12px;\n  margin: 0;\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  background-color: var(${COLOR_INPUT_BACKGROUND_NAME});\n  border-radius: 8px;\n  height: 16px;\n  padding-left: 8px;\n  caret-color: red;\n  max-width: 128px;\n\n  :focus {\n    outline: none;\n    border-radius: 8px;\n    background-color: var(${COLOR_INPUT_BACKGROUND_FOCUS_NAME});\n  }\n\n  font-family: \"Ricty Diminished\";\n`;\n","import styled from \"styled-components\";\nimport { COLOR_HOVER_NAME, COLOR_TEXT_NAME, MONO_FONT_NAME } from \"../GlobalStyle\";\n\nexport const ListItem = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0 4px;\n  height: 16px;\n  background: transparent;\n  border: none;\n  color: var(${COLOR_TEXT_NAME});\n  font-size: 12px;\n  cursor: pointer;\n  font-family: var(${MONO_FONT_NAME});\n  :hover {\n    background-color: var(${COLOR_HOVER_NAME});\n  }\n  :focus {\n    background-color: var(${COLOR_HOVER_NAME});\n    outline: 1px solid var(${COLOR_HOVER_NAME});\n  }\n  white-space: nowrap;\n`;\n","import styled from \"styled-components\";\n\nexport function MenuItemBase(props: {\n  leftIcon?: React.ReactNode;\n  text: string;\n  children?: React.ReactNode;\n}) {\n  return (\n    <Root>\n      <Flex>\n        {props.leftIcon}\n        <MenuItemWrapper $hasLeftIcon={props.leftIcon !== undefined}>\n          {props.text}\n        </MenuItemWrapper>\n      </Flex>\n      {props.children}\n    </Root>\n  );\n}\nconst Root = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  gap: 2px;\n`;\nconst MenuItemWrapper = styled.div<{\n  $hasLeftIcon: boolean;\n}>`\n  padding-left: ${(props) => (props.$hasLeftIcon ? 0 : 12)}px;\n  padding-right: 8px;\n`;\n","import styled from \"styled-components\";\n\nimport { MenuItemBase } from \"./MenuItemBase\";\n\nconst MenuItemShortcut = styled.div`\n  color: rgba(255, 255, 255, 0.5);\n  display: flex;\n  white-space: nowrap;\n  justify-content: space-between;\n  padding-right: 12px;\n`;\n\nexport function MenuItem(props: {\n  leftIcon?: React.ReactNode;\n  text: string;\n  shortcut?: string;\n}) {\n  return (\n    <MenuItemBase text={props.text} leftIcon={props.leftIcon}>\n      <MenuItemShortcut>{props.shortcut}</MenuItemShortcut>\n    </MenuItemBase>\n  );\n}\n","import styled from \"styled-components\";\nimport {\n  COLOR_BACKGROUND_2_NAME,\n  COLOR_BACKGROUND_NAME,\n  COLOR_BORDER_NAME,\n} from \"../GlobalStyle\";\n\nexport const Popover = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  z-index: 10000;\n  top: 16px;\n  left: 0;\n  background-color: var(${COLOR_BACKGROUND_NAME});\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  border-radius: 4px;\n  padding: 4px;\n  box-shadow: 0px 0px 4px 0px var(${COLOR_BACKGROUND_2_NAME});\n  white-space: nowrap;\n`;\n","import { FC, memo, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDragHandler } from \"../utils/getDragHandler\";\n\nexport function ScaleScrollBar(props: {\n  start: number;\n  end: number;\n  onScaleChange?: (start: number, end: number) => void;\n  minimumRange?: number;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n  const handleMouseDownLeftHandle = getDragHandler(({ diffX }) => {\n    let newStart = Math.max(props.start + diffX / ref.current!.clientWidth, 0);\n    const mimumWidthRate = minimumWidthPx / (ref.current?.clientWidth ?? 0);\n    if (props.end - newStart < mimumWidthRate) {\n      newStart = props.end - mimumWidthRate;\n    }\n    props.onScaleChange?.(newStart, props.end);\n  });\n\n  const handleMouseDownRightHandle = getDragHandler(({ diffX }) => {\n    let newEnd = Math.min(props.end + diffX / ref.current!.clientWidth, 1);\n    const mimumWidthRate = minimumWidthPx / (ref.current?.clientWidth ?? 0);\n    if (newEnd - props.start < mimumWidthRate) {\n      newEnd = props.start + mimumWidthRate;\n    }\n    props.onScaleChange?.(props.start, newEnd);\n  });\n\n  const handleMouseDownStrip = getDragHandler(({ diffX }) => {\n    const newStart = props.start + diffX / ref.current!.clientWidth;\n    const newEnd = props.end + diffX / ref.current!.clientWidth;\n    if (newStart < 0) {\n      props.onScaleChange?.(0, newEnd - newStart);\n      return;\n    } else if (newEnd > 1) {\n      props.onScaleChange?.(newStart - (newEnd - 1), 1);\n      return;\n    }\n    props.onScaleChange?.(newStart, newEnd);\n  });\n\n  const minimumWidthPx = 17;\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: `100%`,\n        minHeight: \"10px\",\n        backgroundColor: \"var(--color-input-background)\",\n        userSelect: \"none\",\n        border: \"1px solid var(--color-input-background)\",\n        boxSizing: \"border-box\",\n        position: \"relative\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"20px\",\n        }}\n      ></div>\n      <div\n        style={{\n          position: \"absolute\",\n          left: `calc(${props.start * 100}%)`,\n          width: `calc(${(props.end - props.start) * 100}%)`,\n          minWidth: `${minimumWidthPx}px`,\n          height: \"8px\",\n          backgroundColor: \"var(--color-border)\",\n        }}\n        onMouseDown={handleMouseDownStrip}\n      >\n        <ScaleScrollBarHandle\n          onMouseDown={handleMouseDownLeftHandle}\n          style={{ left: \"0px\" }}\n        />\n        <ScaleScrollBarHandle\n          onMouseDown={handleMouseDownRightHandle}\n          style={{ right: \"0px\" }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst ScaleScrollBarHandle = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: #3a3a3a;\n  cursor: pointer;\n`;\n\nexport const MemoScaleScrollBar = memo(ScaleScrollBar, (prev, next) => {\n  return (\n    prev.start === next.start &&\n    prev.end === next.end &&\n    prev.onScaleChange === next.onScaleChange\n  );\n});\n","import styled from \"styled-components\";\nimport {\n  COLOR_BORDER_NAME,\n  COLOR_INPUT_BACKGROUND_DISABLED_NAME,\n  COLOR_INPUT_BACKGROUND_FOCUS_NAME,\n  COLOR_INPUT_BACKGROUND_NAME,\n  COLOR_TEXT_DISABLED_NAME,\n} from \"../GlobalStyle/GlobalStyle\";\n\nexport const Select = styled.select`\n  display: block;\n  color: var(--color-text);\n  box-sizing: border-box;\n  font-size: 12px;\n  line-height: 12px;\n  margin: 0;\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  background-color: var(${COLOR_INPUT_BACKGROUND_NAME});\n  border-radius: 8px;\n  height: 16px;\n  padding-left: 8px;\n  caret-color: red;\n  max-width: 128px;\n  width: 128px;\n\n  :focus {\n    outline: none;\n    border-radius: 8px;\n    background-color: var(${COLOR_INPUT_BACKGROUND_FOCUS_NAME});\n  }\n  :disabled {\n    background-color: var(${COLOR_INPUT_BACKGROUND_DISABLED_NAME});\n    color: var(${COLOR_TEXT_DISABLED_NAME});\n  }\n  font-family: \"Ricty Diminished\";\n`;\n","import styled from \"styled-components\";\nimport {\n  COLOR_BORDER_NAME,\n  COLOR_INPUT_BACKGROUND_FOCUS_NAME,\n  COLOR_INPUT_BACKGROUND_NAME,\n} from \"../GlobalStyle/GlobalStyle\";\n\nexport const Textarea = styled.textarea`\n  display: block;\n  color: var(--color-text);\n  box-sizing: border-box;\n  font-size: 12px;\n  line-height: 12px;\n  margin: 0;\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  background-color: var(${COLOR_INPUT_BACKGROUND_NAME});\n  border-radius: 8px;\n  height: 16px;\n  padding-left: 8px;\n  caret-color: red;\n  max-width: 256px;\n\n  resize: none;\n  height: 42px;\n\n  :focus {\n    outline: none;\n    border-radius: 8px;\n    background-color: var(${COLOR_INPUT_BACKGROUND_FOCUS_NAME});\n    border-top-right-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n\n  font-family: \"Ricty Diminished\";\n`;\n","import { FC } from \"react\";\n\nimport { useWidth } from \"../hooks/useWidth\";\nimport styled from \"styled-components\";\nimport { TimeText } from \"./TimeText\";\n\nfunction defaultRenderText(time: number) {\n  let viewTime = time.toFixed(2);\n  if (viewTime.endsWith(\".00\")) {\n    viewTime = viewTime.slice(0, -3);\n  } else if (viewTime.endsWith(\"0\")) {\n    viewTime = viewTime.slice(0, -1);\n  }\n  if (viewTime === \"-0\") {\n    viewTime = \"0\";\n  }\n  return viewTime;\n}\n\ntype TimeViewProps = {\n  offsetSec: number;\n  pxPerSec: number;\n  height?: number;\n  steps?: number[];\n  renderText?: (time: number) => string;\n} & Omit<JSX.IntrinsicElements[\"div\"], \"ref\">;\n\nexport const secStep = [0.01, 0.05, 0.1, 0.2, 0.5, 1, 5, 10, 30, 60];\n\nconst minInterval = 32;\n\nexport function getStepPixel(\n  pxPerSec: number,\n  minInterval: number,\n  step: number[],\n  width: number,\n  offsetSec = 0\n) {\n  const stepI = step.findIndex((s) => s * pxPerSec > minInterval);\n  const stepPx = step[stepI] * pxPerSec;\n  const viewNumber = Math.ceil(width / stepPx);\n  const offset = (offsetSec * pxPerSec) % stepPx;\n  if (isNaN(viewNumber)) return [];\n  return [...Array(viewNumber).keys()].map((i) => {\n    return i * stepPx - offset;\n  });\n}\n\nexport function TimeView(props: TimeViewProps) {\n  const [width, ref] = useWidth();\n\n  const { offsetSec, pxPerSec, renderText, steps: propsSteps, ...rest } = props;\n  const steps = getStepPixel(\n    props.pxPerSec,\n    minInterval,\n    propsSteps ?? secStep,\n    width,\n    props.offsetSec\n  );\n  const pSteps = getStepPixel(\n    props.pxPerSec,\n    minInterval / 4,\n    propsSteps ?? secStep,\n    width,\n    props.offsetSec\n  );\n\n  return (\n    <TimeViewRootDiv\n      ref={ref}\n      onMouseDown={props.onMouseDown}\n      onTouchStart={props.onTouchStart}\n      style={{\n        height: props.height,\n      }}\n      {...rest}\n    >\n      {pSteps.map((left) => {\n        return <TimePointDiv $left={left} key={left} />;\n      })}\n      {steps.map((left) => {\n        const time = left / props.pxPerSec + props.offsetSec;\n        return (\n          <TimeText\n            time={renderText ? renderText(time) : defaultRenderText(time)}\n            height={props.height ?? 20}\n            key={left}\n            left={left}\n          />\n        );\n      })}\n    </TimeViewRootDiv>\n  );\n};\n\nconst TimeViewRootDiv = styled.div`\n  position: relative;\n  height: 20px;\n  width: 100%;\n  overflow: hidden;\n  font-size: 12px;\n  box-sizing: border-box;\n  border: 1px solid white;\n  user-select: none;\n  touch-action: none;\n  color: white;\n`;\n\nconst TimePointDiv = styled.div.attrs<{\n  $left: number;\n}>((props) => ({\n  style: {\n    left: props.$left,\n  },\n}))<{ $left: number }>`\n  position: absolute;\n  touch-action: none;\n  pointer-events: none;\n  border-left: 1px solid gray;\n  height: 4px;\n  bottom: 0px;\n`;\n","import styled from \"styled-components\";\nimport { COLOR_BACKGROUND_2_NAME, COLOR_BACKGROUND_NAME } from \"../GlobalStyle\";\n\nexport const ToolBarButton = styled.button`\n  background-color: var(${COLOR_BACKGROUND_2_NAME});\n  color: var(--color-text);\n  border: 0;\n  padding: 2px 8px;\n  height: 16px;\n  font-size: 12px;\n  font-family: \"Ricty Diminished\";\n  cursor: pointer;\n  :hover {\n    background-color: var(${COLOR_BACKGROUND_NAME});\n  }\n`;\n","import styled, { css } from \"styled-components\";\nimport { COLOR_BACKGROUND_2_NAME } from \"../GlobalStyle/GlobalStyle\";\n\nconst ToolTipDiv = styled.div`\n  position: absolute;\n  padding: 4px 8px;\n  border-radius: 4px;\n  background-color: var(${COLOR_BACKGROUND_2_NAME});\n  color: var(--color-text);\n  font-size: 12px;\n  white-space: nowrap;\n  z-index: 10000;\n  border: 1px solid var(--color-border);\n`;\n\nconst TriggerDiv = styled.div`\n  display: flex;\n  width: fit-content;\n`;\n\nimport React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useTooltip } from \"./useTooltip\";\n\nconst DELAY = 0\n\nexport function ToolTip({\n  children,\n  content,\n}: {\n  children: React.ReactNode;\n  content: React.ReactNode;\n}) {\n  const toolTipRef = React.useRef<HTMLDivElement>(null);\n  const { isVisible, setIsVisible, position, childRef } =\n    useTooltip(toolTipRef);\n\n  const tooltipStyle = {\n    top: `${position.top}px`,\n    left: `${position.left}px`,\n  };\n\n  let cancel: NodeJS.Timeout | number = 0;\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(cancel as NodeJS.Timeout);\n    };\n  }, []);\n\n  return (\n    <>\n      <TriggerDiv\n        ref={childRef}\n        onMouseEnter={() => {\n          clearTimeout(cancel as NodeJS.Timeout);\n          setIsVisible(true);\n        }}\n        onMouseLeave={(e) => {\n          cancel = setTimeout(() => {\n            setIsVisible(false);\n          }, DELAY);\n        }}\n      >\n        {children}\n      </TriggerDiv>\n      {isVisible &&\n        ReactDOM.createPortal(\n          <ToolTipDiv\n            ref={toolTipRef}\n            style={{\n              ...tooltipStyle,\n              opacity: 1,\n            }}\n            onMouseEnter={(e) => {\n              clearTimeout(cancel as NodeJS.Timeout);\n              setIsVisible(true);\n            }}\n            onMouseLeave={(e) => {\n              cancel = setTimeout(() => {\n                setIsVisible(false);\n              }, DELAY);\n            }}\n          >\n            {content}\n          </ToolTipDiv>,\n          document.body\n        )}\n    </>\n  );\n}\n","import React, { PropsWithChildren, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { COLOR_BACKGROUND_2_NAME, COLOR_BORDER_NAME } from \"../GlobalStyle\";\n\ninterface ContextMenuProps {\n  show: boolean;\n  e?: React.MouseEvent<HTMLDivElement, MouseEvent>;\n  onClose: () => void;\n}\n\nconst StyledDiv = styled.div.attrs<{\n  x: number;\n  y: number;\n}>((p) => {\n  return {\n    style: {\n      left: p.x + \"px\",\n      top: p.y + \"px\",\n    },\n  };\n})<{ x: number; y: number }>`\n  position: fixed;\n  background-color: var(${COLOR_BACKGROUND_2_NAME});\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  color: var(--color-text);\n  font-size: 12px;\n  line-height: 12px;\n  border-radius: 4px;\n  padding: 4px 4px;\n  z-index: 10000;\n`;\n\nexport const ContextMenu: React.FC<PropsWithChildren<ContextMenuProps>> = (\n  props\n) => {\n  const ref = useRef<HTMLDivElement>(null);\n  if (!props.show) return null;\n  const mouseDown = (e: MouseEvent) => {\n    if (ref.current?.contains(e.target as Node)) {\n      return;\n    }\n    props.onClose();\n    window.removeEventListener(\"mousedown\", mouseDown);\n  };\n  window.addEventListener(\"mousedown\", mouseDown);\n  return (\n    <>\n      <Overlay />\n      <StyledDiv x={props.e?.pageX ?? 0} y={props.e?.pageY || 0} ref={ref}>\n        {props.children}\n      </StyledDiv>\n    </>\n  );\n};\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 1000;\n  background-color: rgba(0, 0, 0, 0.1);\n`;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDragHandler } from \"../utils/getDragHandler\";\n\nimport { DividerBox } from \"./DividerBox\";\n\nconst HPanelDivider = styled.div`\n  min-width: 4px;\n  min-height: 100%;\n  background-color: var(--color-panel-divider);\n  cursor: col-resize;\n  user-select: none;\n`;\n\nconst HBoxRoot = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const HPanel = ({\n  left,\n  right,\n  defaultRate,\n}: {\n  left: React.ReactNode;\n  right: React.ReactNode;\n  defaultRate?: number;\n}) => {\n  const [rate, setRate] = React.useState(defaultRate ?? 0.5);\n  const leftWidth = `calc(${rate * 100}% - 2px)`;\n  const rightWidth = `calc(${(1 - rate) * 100}% - 2px)`;\n  const handleMouseDown = getDragHandler((ctx) => {\n    const { diffX } = ctx;\n    const el = ctx.startEvent.target as HTMLElement;\n    const ctxWidth = el.parentElement?.clientWidth ?? 0;\n    const newRate = Math.max(0, Math.min(1, rate + diffX / ctxWidth));\n    setRate(newRate);\n  });\n  return (\n    <HBoxRoot>\n      <DividerBox\n        style={{\n          width: leftWidth,\n        }}\n      >\n        {left}\n      </DividerBox>\n      <HPanelDivider onMouseDown={handleMouseDown} />\n      <DividerBox\n        style={{\n          width: rightWidth,\n        }}\n      >\n        {right}\n      </DividerBox>\n    </HBoxRoot>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDragHandler } from \"../utils/getDragHandler\";\n\nimport { DividerBox } from \"./DividerBox\";\n\nconst VPanelDivider = styled.div`\n  width: 100%;\n  min-height: 4px;\n  background-color: var(--color-panel-divider);\n  cursor: row-resize;\n  user-select: none;\n`;\n\nconst VPanelBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const VPanel = ({\n  top,\n  bottom,\n  defaultRate = 0.5,\n}: {\n  top: React.ReactNode;\n  bottom: React.ReactNode;\n  defaultRate?: number;\n}) => {\n  const [rate, setRate] = React.useState(defaultRate ?? 0.5);\n  const topHeight = `calc(${rate * 100}% - 2px)`;\n  const bottomHeight = `calc(${(1 - rate) * 100}% - 2px)`;\n  const handleMouseDown = getDragHandler((ctx) => {\n    const { diffY } = ctx;\n    const el = ctx.startEvent.target as HTMLElement;\n    const ctxWidth = el.parentElement?.clientHeight ?? 0;\n    const newRate = Math.max(0, Math.min(1, rate + diffY / ctxWidth));\n    setRate(newRate);\n  });\n  return (\n    <VPanelBox>\n      <DividerBox\n        style={{\n          height: topHeight,\n        }}\n      >\n        {top}\n      </DividerBox>\n      <VPanelDivider onMouseDown={handleMouseDown} />\n      <DividerBox\n        style={{\n          height: bottomHeight,\n        }}\n      >\n        {bottom}\n      </DividerBox>\n    </VPanelBox>\n  );\n};\n"],"names":[],"sourceRoot":""}