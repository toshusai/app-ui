{"version":3,"file":"TreeView-TreeView-stories.88bf5f37.iframe.bundle.js","mappings":";;;;AA6DA;;;;;;;AAOA;AACA;;;;AAMA;;;;;;;;;ACrCA;;;AAGA;;;;AAKA","sources":["webpack://@toshusai/app-ui/./src/TreeView/DirectoryTreeItem.tsx","webpack://@toshusai/app-ui/./src/TreeView/TreeItem.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { NEST_SPACE, TreeItem, TreeViewItem } from \"./TreeItem\";\nimport { TreeView, WithTreeItemEvent } from \"./TreeView\";\nimport { useIsSelectedItem } from \"./useIsSelectedItem\";\n\nexport const DirectoryTreeItem = React.memo(function DirectoryTreeView<\n  U,\n  T extends TreeViewItem<U>\n>(props: {\n  item: T;\n  depth?: number;\n  renderItem: (item: T) => React.ReactNode;\n  onMouseDown?: WithTreeItemEvent<U, T>;\n  onMouseMove?: WithTreeItemEvent<U, T>;\n  onMouseUp?: WithTreeItemEvent<U, T>;\n  onClick?: WithTreeItemEvent<U, T>;\n}) {\n  const [open, setOpen] = useState(true);\n  const depth = props.depth ?? 0;\n  const isSelected = useIsSelectedItem(props.item);\n  return (\n    <TreeViewRootUl>\n      <TreeItem\n        depth={depth}\n        selected={isSelected}\n        onMouseDown={(e) => props.onMouseDown?.(props.item, e)}\n        onMouseMove={(e) => props.onMouseMove?.(props.item, e)}\n        onMouseUp={(e) => props.onMouseUp?.(props.item, e)}\n        onClick={(e) => props.onClick?.(props.item, e)}\n      >\n        {(props.item.children?.length ?? 0) > 0 ? (\n          <Button onClick={() => setOpen(!open)}>{open ? \"-\" : \"+\"}</Button>\n        ) : (\n          <Button style={{ visibility: \"hidden\" }}>-</Button>\n        )}\n        <PointerEventsNone>{props.renderItem(props.item)}</PointerEventsNone>\n      </TreeItem>\n      {open && (\n        <TreeView\n          depth={depth + 1}\n          items={props.item.children}\n          renderItem={props.renderItem as any}\n          onMouseMove={props.onMouseMove as any}\n          onMouseDown={props.onMouseDown as any}\n          onMouseUp={props.onMouseUp as any}\n          onClick={props.onClick as any}\n        />\n      )}\n    </TreeViewRootUl>\n  );\n});\n\nexport const PointerEventsNone = styled.div`\n  pointer-events: none;\n  display: flex;\n  width: calc(100% - 12px);\n`;\n\n\nconst Button = styled.button`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n  color: var(--color-text);\n  width: ${NEST_SPACE}px;\n  min-width: ${NEST_SPACE}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TreeViewRootUl = styled.ul`\n  padding: 0;\n  margin: 0;\n\n  user-select: none;\n  width: 100%;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { COLOR_FOCUS_NAME, COLOR_HOVER_NAME } from \"../GlobalStyle\";\n\nexport type TreeViewItem<T> = {\n  id: string;\n  children?: TreeViewItem<T>[];\n  data: T;\n};\n\nexport const NEST_SPACE = 6;\n\nexport function TreeItem<T>(\n  props: {\n    children: React.ReactNode;\n    depth?: number;\n    selected?: boolean;\n  } & Omit<React.HTMLAttributes<HTMLLIElement>, \"dangerouslySetInnerHTML\">\n) {\n  const { children, depth, ...rest } = props;\n  return (\n    <TreeItemRoot\n      selected={props.selected}\n      padding={props.depth ? props.depth * NEST_SPACE : 0}\n      {...rest}\n    >\n      {props.children}\n    </TreeItemRoot>\n  );\n}\n\nconst TreeItemRoot = styled.li<{\n  padding: number;\n  selected?: boolean;\n}>`\n  display: flex;\n  cursor: pointer;\n  padding-left: ${(props) => props.padding}px;\n  height: 12px;\n  line-height: 12px;\n  background-color: ${(props) =>\n    props.selected ? `var(${COLOR_FOCUS_NAME})` : \"transparent\"};\n  font-family: \"Roboto Mono\", monospace;\n\n  :hover {\n    background-color: ${(props) =>\n      props.selected ? `var(${COLOR_FOCUS_NAME})` : `var(${COLOR_HOVER_NAME})`};\n  }\n`;\n"],"names":[],"sourceRoot":""}