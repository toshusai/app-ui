{"version":3,"file":"ToolTip-ToolTip-stories.45c4a637.iframe.bundle.js","mappings":";;;;;;;;AAiBA;AACA;;;;;;AAMA;;;AAGA;AACA;;;AAKA;AACA;;;;;AC3BA;;;;;;AAQA;;;AASA","sources":["webpack://@toshusai/app-ui/./src/Button/Button.tsx","webpack://@toshusai/app-ui/./src/ToolTip/ToolTip.tsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\nimport {\n  COLOR_BORDER_NAME,\n  COLOR_BUTTON_BACKGROUND_NAME,\n  COLOR_INPUT_BACKGROUND_DISABLED_NAME,\n  COLOR_INPUT_BACKGROUND_FOCUS_NAME,\n  COLOR_TEXT_DISABLED_NAME,\n} from \"../GlobalStyle/GlobalStyle\";\n\nexport const buttonCss = css`\n  cursor: pointer;\n  display: block;\n  color: var(--color-text);\n  box-sizing: border-box;\n  font-size: 12px;\n  line-height: 12px;\n  margin: 0;\n  border: 1px solid var(${COLOR_BORDER_NAME});\n  background-color: var(${COLOR_BUTTON_BACKGROUND_NAME});\n  border-radius: 4px;\n  height: 16px;\n  padding-left: 8px;\n  max-width: 128px;\n  :active {\n    background-color: var(${COLOR_INPUT_BACKGROUND_FOCUS_NAME});\n  }\n  :disabled {\n    background-color: var(${COLOR_INPUT_BACKGROUND_DISABLED_NAME});\n    color: var(${COLOR_TEXT_DISABLED_NAME});\n  }\n  font-family: \"Ricty Diminished\";\n`;\n\nexport const Button = styled.button`\n  ${buttonCss}\n`;\n","import styled, { css } from \"styled-components\";\nimport { COLOR_BACKGROUND_2_NAME } from \"../GlobalStyle/GlobalStyle\";\n\nconst ToolTipDiv = styled.div`\n  position: absolute;\n  padding: 4px 8px;\n  border-radius: 4px;\n  background-color: var(${COLOR_BACKGROUND_2_NAME});\n  color: var(--color-text);\n  font-size: 12px;\n  white-space: nowrap;\n  z-index: 10000;\n  border: 1px solid var(--color-border);\n`;\n\nconst TriggerDiv = styled.div`\n  display: flex;\n  width: fit-content;\n`;\n\nimport React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useTooltip } from \"./useTooltip\";\n\nconst DELAY = 0\n\nexport function ToolTip({\n  children,\n  content,\n}: {\n  children: React.ReactNode;\n  content: React.ReactNode;\n}) {\n  const toolTipRef = React.useRef<HTMLDivElement>(null);\n  const { isVisible, setIsVisible, position, childRef } =\n    useTooltip(toolTipRef);\n\n  const tooltipStyle = {\n    top: `${position.top}px`,\n    left: `${position.left}px`,\n  };\n\n  let cancel: NodeJS.Timeout | number = 0;\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(cancel as NodeJS.Timeout);\n    };\n  }, []);\n\n  return (\n    <>\n      <TriggerDiv\n        ref={childRef}\n        onMouseEnter={() => {\n          clearTimeout(cancel as NodeJS.Timeout);\n          setIsVisible(true);\n        }}\n        onMouseLeave={(e) => {\n          cancel = setTimeout(() => {\n            setIsVisible(false);\n          }, DELAY);\n        }}\n      >\n        {children}\n      </TriggerDiv>\n      {isVisible &&\n        ReactDOM.createPortal(\n          <ToolTipDiv\n            ref={toolTipRef}\n            style={{\n              ...tooltipStyle,\n              opacity: 1,\n            }}\n            onMouseEnter={(e) => {\n              clearTimeout(cancel as NodeJS.Timeout);\n              setIsVisible(true);\n            }}\n            onMouseLeave={(e) => {\n              cancel = setTimeout(() => {\n                setIsVisible(false);\n              }, DELAY);\n            }}\n          >\n            {content}\n          </ToolTipDiv>,\n          document.body\n        )}\n    </>\n  );\n}\n"],"names":[],"sourceRoot":""}